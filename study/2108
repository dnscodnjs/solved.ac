import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int tc = Integer.parseInt(br.readLine());

        List<Integer> list = new ArrayList<>();
        for (int TC = 0; TC < tc; TC++) {
            list.add(Integer.parseInt(br.readLine()));
        }

        Collections.sort(list);

        StringBuilder sb = new StringBuilder();

        // 1. 산술 평균
        int sum = 0;
        for (Integer n : list) {
            sum += n;
        }
        sb.append(Math.round((float) sum / list.size())).append("\n");

        // 2. 중앙값
        sb.append(list.get(list.size() / 2)).append("\n");

        // 3. 최빈값
        Map<Integer, Integer> hashmap = new HashMap<>();

        // 리스트에 있는 각 숫자의 빈도수를 세서 frequencyMap에 저장합니다.
        for (Integer num : list) {
            hashmap.put(num, hashmap.getOrDefault(num, 0) + 1);
        }

        // 모든 숫자 중에서 가장 높은 빈도수를 찾습니다.
        int maxFrequency = Collections.max(hashmap.values());

        // 최빈값(가장 높은 빈도를 가진 숫자)을 저장할 리스트를 생성합니다.
        List<Integer> modeList = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : hashmap.entrySet()) {
            // 현재 숫자의 빈도수가 최빈값과 같은지 확인합니다.
            if (entry.getValue() == maxFrequency) {
                // 만약 같다면, 최빈값 리스트에 해당 숫자를 추가합니다.
                modeList.add(entry.getKey());
            }
        }
        
        // 최빈값 리스트를 오름차순으로 정렬합니다.
        Collections.sort(modeList);

        // 최빈값이 하나라면, 그 값을 StringBuilder에 추가합니다.
        if (modeList.size() <= 1) {
            sb.append(modeList.get(0)).append("\n");
        } else {
            // 최빈값이 여러 개라면, 두 번째로 작은 값만 StringBuilder에 추가합니다.
            sb.append(modeList.get(1)).append("\n");
        }


        // 4. 범위
        sb.append(list.get(list.size() - 1) - list.get(0)).append("\n");

        System.out.println(sb);
    }
}
