import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

public class Main {
    public static int N;
    public static int M;
    public static int V;

    public static int branch[][];
    public static boolean visit[];

    public static Queue<Integer> queue;

    public static void dfs(int start){
        visit[start] = true;
        System.out.print(start + " ");

        for(int i = 0; i<= N; i++){
            if(branch[start][i] ==1 & !visit[i]){
                dfs(i);
            }
        }

    }
    public static void bfs(int start){
        queue = new LinkedList<Integer>();
        queue.add(start);
        visit[start] = true;
        System.out.print(start + " ");

        while(!queue.isEmpty()){
            int temp = queue.poll();

            for(int i = 0; i<= N; i++){
                if(branch[temp][i] ==1 & !visit[i]){
                    visit[i] = true;
                    queue.add(i);
                    System.out.print(i + " ");
                }
            }
        }

    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        N = in.nextInt();
        M = in.nextInt();
        V = in.nextInt();

        branch = new int[1001][1001];
        visit = new boolean[1001];

        for(int i = 0; i<M; i++){
            int a = in.nextInt();
            int b = in.nextInt();

            branch[a][b] = branch[b][a] = 1;
        }

        dfs(V);
        System.out.println();

        Arrays.fill(visit,false);
        bfs(V);
    }
}
